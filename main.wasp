app TodoApp {
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: [ EmailAndPassword ], // More methods coming soon!
    onAuthFailedRedirectTo: "/login" // We will see how this is used a bit later
  },
  dependencies: [
    ("react-clock", "3.0.0"),
    ("react-query", "^3.34.19")
  ]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@ext/MainPage.js"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@ext/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@ext/LoginPage"
}

entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User?   @relation(fields: [userId], references: [id])
    userId      Int?
psl=}

entity User {=psl
    id          Int     @id @default(autoincrement())
    email       String  @unique
    password    String  
    tasks       Task[]
psl=}

query getTasks {
  // We specify that JS implementation of the query (which is an async JS function)
  // can be found in `ext/queries.js` as named export `getTasks`.
  fn: import { getTasks } from "@ext/queries.js",
  // We tell Wasp that this query is doing something with entity `Task`. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Task]
}

query getTask {
  fn: import { getTask } from "@ext/queries.js",
  entities: [Task]

}

action createTask {
  fn: import { createTask } from "@ext/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@ext/actions.js",
  entities: [Task]
}