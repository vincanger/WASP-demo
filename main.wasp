app TodoApp {
  title: "TodoApp",
  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {}, 
      google: {
        getUserFieldsFn: import { getUserFields } from "@ext/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/",
  },
  dependencies: [
    ("react-clock", "3.0.0"),
    ("react-query", "^3.39.2")
  ],
  db: {
    system: PostgreSQL
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@ext/MainPage.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@ext/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@ext/LoginPage"
}

route testRoute { path: "/test", to: TestPage }
page TestPage {
  component: import Test from "@ext/TestPage"
}

entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User?   @relation(fields: [userId], references: [id])
    userId      Int?
psl=}

entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    displayName String  
    password    String  
    isAuthComplete    Boolean @default(false)
    tasks       Task[]
    externalAuthAssociations SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

query getTasks {
  // We specify that JS implementation of the query (which is an async JS function)
  // can be found in `ext/queries.js` as named export `getTasks`.
  fn: import { getTasks } from "@ext/queries.js",
  // We tell Wasp that this query is doing something with entity `Task`. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Task]
}

query getTask {
  fn: import { getTask } from "@ext/queries.js",
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@ext/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@ext/actions.js",
  entities: [Task]
}

action signUp {
  fn: import { signUp } from "@ext/actions.js",
  entities: [User]
}

action updateUsername {
  fn: import { updateUsername } from "@ext/actions.js",
  entities: [User]
}